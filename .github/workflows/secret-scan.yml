name: Secret Scanning

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  gitleaks:
    name: Scan for secrets with Gitleaks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional: for Gitleaks Pro
        with:
          # Scan the entire repository history
          args: --verbose --redact
      
      - name: Upload Gitleaks Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report-${{ github.sha }}
          path: |
            gitleaks-report.json
            gitleaks-report.sarif
          retention-days: 30
      
      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-report.sarif
          category: gitleaks
        continue-on-error: true
      
      - name: Fail on secrets detected
        if: failure()
        run: |
          echo "::error::Secrets detected in repository! Review the Gitleaks report artifact."
          echo "To fix:"
          echo "1. Review the gitleaks-report.json artifact"
          echo "2. Remove secrets from the repository"
          echo "3. Use scripts/clean_history.sh to clean git history if needed"
          echo "4. Rotate any exposed credentials immediately"
          exit 1

  trufflehog:
    name: Scan for secrets with TruffleHog
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          # Scan the entire git history
          path: ./
          base: ""
          head: ${{ github.ref_name }}
          extra_args: --debug --only-verified
        continue-on-error: true
      
      - name: Report results
        if: always()
        run: |
          echo "TruffleHog scan completed"
          echo "Check workflow logs for verified secrets"

  summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [gitleaks, trufflehog]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Gitleaks Status: ${{ needs.gitleaks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### TruffleHog Status: ${{ needs.trufflehog.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.gitleaks.result }}" == "failure" ]]; then
            echo "⚠️ **Secrets detected by Gitleaks!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Download the gitleaks-report artifact" >> $GITHUB_STEP_SUMMARY
            echo "2. Remove secrets from code and environment files" >> $GITHUB_STEP_SUMMARY
            echo "3. Use \`scripts/clean_history.sh\` for history cleanup" >> $GITHUB_STEP_SUMMARY
            echo "4. Rotate all exposed credentials immediately" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No secrets detected by Gitleaks" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources" >> $GITHUB_STEP_SUMMARY
          echo "- [Secret Removal Guide](../docs/vault_integration.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [History Cleanup Script](../scripts/clean_history.sh)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Policy](../SECURITY.md)" >> $GITHUB_STEP_SUMMARY
