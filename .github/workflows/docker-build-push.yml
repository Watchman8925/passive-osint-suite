name: Build and Push Docker Image (SBOM + Provenance)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch: {}

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/watchman8925/passive-osint-suite

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Disk Cleanup
        run: |
          echo "Cleaning up unnecessary files..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          echo "Pruning Docker images..."
          docker image prune -af

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push (with SBOM + provenance)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false  # Changed to false - build only, no push
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Cosign sign all tags (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          set -euo pipefail
          echo "Signing tags:\n$TAGS"
          # Normalize to newline-delimited list and sign each
          echo "$TAGS" | tr ' ' '\n' | while read -r ref; do
            [[ -z "$ref" ]] && continue
            echo "cosign sign --yes $ref"
            cosign sign --yes "$ref"
          done

      - name: Cosign verify all tags
        env:
          COSIGN_EXPERIMENTAL: 1
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          set -euo pipefail
          echo "Verifying tags:\n$TAGS"
          echo "$TAGS" | tr ' ' '\n' | while read -r ref; do
            [[ -z "$ref" ]] && continue
            echo "cosign verify $ref"
            cosign verify "$ref"
          done
