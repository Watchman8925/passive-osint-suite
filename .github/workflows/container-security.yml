name: Container Security

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile*'
      - 'requirements*.txt'
      - '.github/workflows/container-security.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile*'
      - 'requirements*.txt'
      - '.github/workflows/container-security.yml'
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  dockle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if Docker build needed
        id: check_docker
        run: |
          # For PRs, compare against the base branch; for pushes, compare against previous commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            if git diff --name-only $BASE_SHA HEAD | grep -qE '^(Dockerfile|requirements.*\.txt)'; then
              echo "docker_changed=true" >> $GITHUB_OUTPUT
            else
              echo "docker_changed=false" >> $GITHUB_OUTPUT
            fi
          elif git diff --name-only HEAD~1 HEAD | grep -qE '^(Dockerfile|requirements.*\.txt)'; then
            echo "docker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "docker_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Free disk space
        if: steps.check_docker.outputs.docker_changed == 'true'
        run: |
          echo "Disk space before cleanup:"
          df -h
          # Remove unnecessary files to free up space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker system prune -af
          rm -rf ~/.cache/pip
          echo "Disk space after cleanup:"
          df -h

      - name: Set up Docker Buildx
        if: steps.check_docker.outputs.docker_changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (with cache)
        if: steps.check_docker.outputs.docker_changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: passive-osint-suite:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
        timeout-minutes: 30

      - name: Run Dockle security scanner
        if: steps.check_docker.outputs.docker_changed == 'true'
        continue-on-error: true
        run: |
          # Install Dockle
          VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -L -o dockle.tar.gz https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.tar.gz
          tar zxvf dockle.tar.gz
          sudo mv dockle /usr/local/bin

          # Run Dockle with appropriate settings
          dockle \
            --exit-code 0 \
            --exit-level warn \
            --format json \
            --output dockle-results.json \
            --ignore CIS-DI-0001 \
            --ignore CIS-DI-0005 \
            --ignore CIS-DI-0006 \
            --ignore DKL-DI-0006 \
            passive-osint-suite:test || true

          # Display results
          echo "Dockle scan results:"
          dockle \
            --exit-code 0 \
            --exit-level warn \
            passive-osint-suite:test || true

      - name: Upload Dockle results
        uses: actions/upload-artifact@v4
        if: always() && steps.check_docker.outputs.docker_changed == 'true'
        with:
          name: dockle-results
          path: dockle-results.json
          retention-days: 7
